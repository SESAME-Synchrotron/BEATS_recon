# TomoPy recon on SESAME Rum

import tomopy
import dxchange
import numpy as np
# from scipy import ndimage
import numexpr as ne
import os
import logging
from time import time


# settings ####################################################################################################
algorithm = 'gridrec'
ncore = 96
work_path = "BEATS_first_scan-20230511T164830/"
h5file = work_path+"BEATS_first_scan-20230511T164830.h5"
cor_range = [1100, 1150, 5]

# output reconstruction path (make sure this exists)
path_recon = work_path+"/cor/"

# start test ##################################################################################################
time_start = time()
logging.basicConfig(filename=work_path+'recon_'+algorithm+'.log', level=logging.DEBUG)

# read projections, darks, flats and angles
projs, flats, darks, theta = dxchange.read_aps_32id(h5file, exchange_rank=0)

# If the angular information is not available from the raw data you need to set the data collection angles.
# In this case, theta is set as equally spaced between 0-180 degrees.
if theta is None:
    theta = tomopy.angles(projs.shape[0])
    logging.info("Theta not found.. generated by tomopy")

theta = tomopy.angles(projs.shape[0])
logging.info("Theta: " + str(theta))

# flat-field correction
logging.info("Flat-field correct.")
projs = tomopy.normalize(projs, flats, darks, ncore=ncore)

# - log transform
logging.info("- log transform.")
projs = tomopy.minus_log(projs, ncore=ncore)

# auto detect Center Of Rotation (COR)
# logging.info("tomopy.find_center..")
logging.info("tomopy.find_center..")
COR = tomopy.find_center(projs, theta, init=projs.shape[2]/2, tol=1)
logging.info("COR: " + str(COR))

# auto detect Center Of Rotation (COR) witn Vo method
COR_vo = tomopy.find_center_vo(projs)
logging.info("COR_Vo: " + str(COR_vo))

# Launch tomopy recon (no ASTRA)
recon = tomopy.write_center(projs, theta, path_recon, cor_range, algorithm=algorithm, sinogram_order=False)

time_end = time()
execution_time = time_end - time_start
logging.info("Recon test completed in {} s".format(str(execution_time)))
